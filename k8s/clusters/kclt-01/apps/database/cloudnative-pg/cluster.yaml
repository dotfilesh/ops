---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres
  namespace: database
spec:
  instances: 3
  primaryUpdateStrategy: unsupervised
  storage:
    size: 15Gi
    storageClass: ceph-block
  superuserSecret:
    name: postgres-superuser
  #bootstrap:
  #  initdb:
  #    database: app
  #    owner: app
  #    secret:
  #      name: app-secret
  #  # # Yeah idk how to automatically attempt recovery, THEN make
  #  # a new DB failing that so...
  #  #recovery:
  #  #  source: postgres-backup
  monitoring:
    enablePodMonitor: true
  backup:
    retentionPolicy: 30d
    barmanObjectStore:
      wal:
        compression: bzip2
        # TODO: Investigate viability of encrypted backups.
        #encryption: AES256
        maxParallel: 8
      # these two sods are incorrect. The actual host, bucket, etc is
      # in a configmap generated by rook. These should be
      # automatically propegated but as of this moment I don't see how
      # that is done.
      # TODO: fix above
      endpointURL: https://s3.${CLUSTER_NAME}.api.${GLOBALSECRET_PUBLIC_DOMAIN}/
      destinationPath: s3://cloudnative-pg-backup/
      serverName: "postgres"
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg-backup 
          key: AWS_ACCESS_KEY_ID 
        secretAccessKey:
          name: cloudnative-pg-backup 
          key: AWS_SECRET_ACCESS_KEY
  externalClusters:
    - name: postgres-backup
      barmanObjectStore:
        wal:
          compression: bzip2
          maxParallel: 8
        endpointURL: https://s3.${CLUSTER_NAME}.api.${GLOBALSECRET_PUBLIC_DOMAIN}/
        destinationPath: s3://cloudnative-pg-backup/
        serverName: "postgres-recovery"
        s3Credentials:
          accessKeyId:
            name: cloudnative-pg-backup 
            key: AWS_ACCESS_KEY_ID 
          secretAccessKey:
            name: cloudnative-pg-backup 
            key: AWS_SECRET_ACCESS_KEY
